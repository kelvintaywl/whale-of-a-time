version: 2.1

defaults:
  environment: &environment
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: kelvintaywl

jobs:
  build_custom_nginx:
    environment:
      <<: *environment
    docker:
      - image: cimg/python:3.10
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - setup_remote_docker:
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.18
      - run:
          name: Build image
          command: |
            docker image build --tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" .
            docker image tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:<< parameters.image_tag >>"
      - run:
          name: Run built-image as container (background)
          command: |
            docker container run -d --name fancy-nginx -p "8080:80" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run: docker info
      - run:
          name: Ping container
          command: |
            remote_host=$(python -c "import os; from urllib.parse import urlparse; o = urlparse(os.environ['DOCKER_HOST']); print(o.hostname)")

            echo "Looking up ${remote_host}"
            curl -s "https://${remote_host}:8080"

#       - run:
#           name: Check container is up
#           command: |
#             # Because we are using remote_docker, all docker-related activities run inside this remote container.
#             # In other words, the nginx server is not directly accessible to our primary container here.
#             # Hence, we run dockerize in the same network in order to poll it.
#             # NOTE that we are polling port 80, not 8080 since inside the network, our fancy-nginx is exposed at port 80 instead.
#             # See https://circleci.com/docs/2.0/building-docker-images/#accessing-services
#             docker container run --network container:fancy-nginx docker.io/jwilder/dockerize -wait http://localhost:80 -wait-retry-interval 2s -timeout 20s

workflows:
  # Builds a custom image,
  # spins it up for tests,
  # and publishes to Docker Hub!
  build_test_publish:
    jobs:
      - build_custom_nginx:
          context: docker
