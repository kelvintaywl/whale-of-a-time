version: 2.1

defaults:
  environment: &environment
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: kelvintaywl

jobs:
  build_custom_nginx:
    environment:
      <<: *environment
    docker:
      - image: cimg/base:stable
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - checkout
      - setup_remote_docker:
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.7
      - run:
          name: Build image
          command: |
            docker image build --tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" .
      - run:
          name: Save image as tar
          command: |
            mkdir -p images
            docker image save -o "images/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - persist_to_workspace:
          root: .
          paths:
            - images
  test_and_publish_custom_nginx:
    environment:
      <<: *environment
    docker:
      - image: cimg/base:stable
    parameters:
      image_name:
        type: string
        default: 'fancy-nginx'
      image_tag:
        type: string
        default: 'latest'
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.7
      - run:
          name: Load image
          command: |
            docker image load < "images/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run:
          name: Include additional image tags
          command: |
            docker image tag "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:<< parameters.image_tag >>"
      - run:
          name: Run built-image as container (background)
          command: |
            docker container run -d --name fancy-nginx -p "8080:80" "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>:${CIRCLE_SHA1}"
      - run:
          name: Check container is up
          command: |
            # Because we are using remote_docker, all docker-related activities run inside this remote container.
            # In other words, the nginx server is not directly accessible to our primary container here.
            # Hence, we run dockerize in the same network in order to poll it.
            # NOTE that we are polling port 80, not 8080 since inside the network, our fancy-nginx is exposed at port 80 instead.
            # See https://circleci.com/docs/2.0/building-docker-images/#accessing-services
            docker container run --network container:fancy-nginx docker.io/jwilder/dockerize -wait http://localhost:80 -wait-retry-interval 2s -timeout 20s
      - run:
          name: Printscreen webpage served by container
          command: |
            # https://hub.docker.com/r/lifenz/docker-screenshot
            # Save a screenshot as screenshot.png at 1280px after pausing 2000ms, with zoom factor: 1
            docker container run --network container:fancy-nginx --name screenshot lifenz/docker-screenshot http://localhost:80 screenshot.png 1280px 2000 1
            docker cp screenshot:/srv/screenshot.png $PWD
      - store_artifacts:
           path: screenshot.png
      - run:
          name: Publish image
          command: |
            # login credentials should be provided via context or project environment variables.
            echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY --username $DOCKER_LOGIN --password-stdin

            docker image push --all-tags "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.image_name >>"

workflows:
  # Builds and saves a custom image,
  # loads the image in the next job, spins it up for tests,
  # and publishes to Docker Hub!
  build_test_publish:
    jobs:
      - build_custom_nginx
      - test_and_publish_custom_nginx:
          requires:
            - build_custom_nginx
          context: docker
